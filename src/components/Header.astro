---
import ButtonColor from "@/components/ButtonColor.astro";
import { COLORS_LIST } from "@/constants/colors";
import { Icon } from "astro-icon/components";
---

<script>
  import { COLORS_LIST } from "@/constants/colors";

  const setColor = (slug: string) => {
    const ElementBody = document.querySelector("body");
    const target = COLORS_LIST.filter((color) => color.slug === slug)[0];
    const COLOR_VARIABLE_LIST = [
      { name: "bgColor", value: target.bgColor },
      { name: "cardTextColor", value: target.cardTextColor },
      { name: "cardBgColor", value: target.cardBgColor },
      { name: "linkColor", value: target.linkColor },
    ];

    COLOR_VARIABLE_LIST.forEach((item) => {
      if (item.value) {
        ElementBody?.style.setProperty(`--${item.name}`, item.value);
      }
    });
  };

  const setMenu = () => {
    const slug = localStorage.getItem("color") ?? "night";
    setColor(slug);
    const ElementButtonOpen =
      document.querySelector<HTMLButtonElement>(".js-openMenu");
    const ElementMenu = document.querySelector<HTMLDivElement>(".js-menu");
    if (ElementButtonOpen !== null) {
      ElementButtonOpen.addEventListener("click", () => {
        ElementMenu?.classList.add("visible");
      });
    }
    const ElementButtonClose =
      document.querySelector<HTMLButtonElement>(".js-closeMenu");
    if (ElementButtonClose !== null) {
      ElementButtonClose.addEventListener("click", () => {
        ElementMenu?.classList.remove("visible");
      });
    }
    const ElementButtonList = document.querySelectorAll<HTMLButtonElement>(
      ".js-buttonColorSelector",
    );

    ElementButtonList.forEach((item) => {
      if (item && item.dataset.slug) {
        const slug = item.dataset.slug;
        item?.addEventListener("click", () => {
          localStorage.setItem("color", slug);
          setColor(slug);
          ElementMenu?.classList.remove("visible");
        });
      }
    });
  };

  setMenu();
  document.addEventListener("astro:after-swap", setMenu);
</script>

<header>
  <div class="inner">
    <button class="js-openMenu buttonOpen">
      <Icon name="colors" />
    </button>

    <div class="menu js-menu">
      <p>カラーモード変更</p>
      <ul>
        {
          COLORS_LIST.map((item) => (
            <ButtonColor
              slug={item.slug}
              label={item.label}
              bgColor={item.bgColor}
              cardTextColor={item.cardTextColor}
              cardBgColor={item.cardBgColor}
              linkColor={item.linkColor}
            />
          ))
        }
      </ul>
      <button class="js-closeMenu close">とじる</button>
    </div>
  </div>
</header>

<style lang="scss">
  [data-icon="colors"] {
    width: 32px;
    height: 32px;
    color: rgb(var(--cardBgColor));
  }
  .close {
    color: rgb(var(--cardTextColor));
    margin: 16px 0;
  }
  .menu {
    color: rgb(var(--cardTextColor));
    position: absolute;
    border: 2px solid rgb(var(--cardTextColor));
    background: rgb(var(--cardBgColor));
    z-index: 100;
    top: 0;
    right: 0;
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    transition: transform 0.5s;
    padding: 8px 16px;
    transform: translateY(-180%);

    &.visible {
      visibility: visible;
      transform: translateY(0);
    }

    p {
      margin: 8px 0 16px 0;
    }

    ul {
      column-gap: 16px;
      width: 100%;
    }
  }
  header {
    --header-inner-height: 40px;
    display: flex;
    justify-content: center;
    margin: 16px 0 16px;
    .inner {
      width: 80%;
      max-width: 750px;
      position: relative;
      height: var(--header-inner-height);
      position: relative;
      .buttonOpen {
        position: absolute;
        right: 0;
        img {
          width: var(--header-inner-height);
          height: var(--header-inner-height);
        }
      }
    }
  }
</style>
