---
import { ViewTransitions } from 'astro:transitions'
import { styleHelper } from '@/utils/styleHelper'
import Header from '@/components/Header.astro'
import { COLORS_LIST } from '@/constants/colors'
import Footer from '@/components/Footer.astro'
import Load from '@/components/tanka/Load.astro'

export interface Props {
  title: string
  ogImage?: string
}

const { title, ogImage } = Astro.props

const ogp = ogImage ?? 'https://novel.manasas.dev/defaultBg.png'

const defaultColor = COLORS_LIST[2]

const STYLE = styleHelper([
  { name: 'bgColor', value: defaultColor.bgColor },
  { name: 'cardTextColor', value: defaultColor.cardTextColor },
  { name: 'cardBgColor', value: defaultColor.cardBgColor },
  { name: 'linkColor', value: defaultColor.linkColor },
])
---

<script>
  const prev = document.querySelector('.js-prev')
  const next = document.querySelector('.js-next')
  const tankaList = document.querySelectorAll('.js-tankaCard')
  const tankaMainElement = document.querySelector('.js-tankaMain')
  let current = 0

  prev?.addEventListener('click', () => {
    if (current < 1) return
    current--
    tankaList[current].scrollIntoView({ behavior: 'smooth', inline: 'center' })
  })

  next?.addEventListener('click', () => {
    if (current >= tankaList.length - 1) return
    current++
    tankaList[current].scrollIntoView({ behavior: 'smooth', inline: 'center' })
  })

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const target = entry.target as HTMLElement
          if (!target) return
          current = Number(target.dataset.tankaid) - 1
          redrawBar()
        }
      })
    },
    {
      root: document.querySelector('body'),
      rootMargin: '0px',
      threshold: 0.8,
    }
  )

  tankaList.forEach((tanka) => {
    observer.observe(tanka)
  })

  document.addEventListener('astro:page-load', () => {
    tankaList[0].scrollIntoView({ behavior: 'smooth', inline: 'center' })
  })

  if (tankaMainElement)
    tankaMainElement.addEventListener('wheel', (event) => {
      const e = event as WheelEvent
      if (Math.abs(e.deltaY) < Math.abs(e.deltaX)) return
      e.preventDefault()
      tankaMainElement.scrollLeft += e.deltaY
    })

  const barElement = document.querySelector('.js-bar')
  const length = tankaList.length
  // currentに合わせてのびる
  const redrawBar = () => {
    if (!barElement || length === 0) return
    const elm = barElement as HTMLDivElement
    elm.style.width = `${(current + 1) * (100 / length - 1)}%`
  }
</script>

<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content="まなさすの創作保管庫" />
    <meta property="og:site_name" content="北極の とある倉庫" />
    <meta property="og:title" content={title} />
    <meta property="og:url" content="https://novel.manasas.dev" />
    <meta property="og:description" content="まなさすの創作保管庫" />
    <meta property="og:image" content={ogp} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body style={STYLE}>
    <Header />
    <main>
      <Load />
      <article class="content">
        <slot />
      </article>
    </main>
    <Footer />
  </body>
</html>

<style is:global lang="scss">
  html {
    font-family: system-ui, sans-serif;
  }

  body {
    margin: 0;
    background: rgb(var(--bgColor));
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p {
    line-height: 1.7;
    margin: 1rem 0;
  }

  h1,
  h2 {
    margin: 0 0 0.5rem;
  }

  h3 {
    margin: 0 0 0.5rem;
  }

  hr {
    border: none;
    border-top: 2px double #cccccc;
    margin: 1.5rem auto;
    width: 95%;
  }

  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  li {
    margin: 0.5rem 0;
  }

  a {
    color: rgb(var(--linkColor));
    &:hover {
      text-decoration: none;
    }
  }

  button {
    padding: 0;
    margin: 0;
    border: none;
    background: transparent;
    cursor: pointer;
  }

  main {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(
      100vh - 40px - 16px * 2 - 42px - 16px * 2 - 37px - 16px * 2
    );
    // ヘッダ高 - ヘッダ余白 - 戻る高 - 戻る余白 - フッタ高 - フッタ余白
  }

  .content {
    display: flex;
    flex-direction: column;
    width: 90%;
    max-width: 360px;
  }
</style>
