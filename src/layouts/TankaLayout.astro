---
import Header from '@/components/Header.astro'
import Head from '@/layouts/components/Head.astro'
import Body from '@/layouts/components/Body.astro'
import Footer from '@/components/Footer.astro'
import Load from '@/components/tanka/Load.astro'
import '@/styles/global.scss'
import Bar from '@/components/tanka/Bar.astro'

export interface Props {
  title: string
  ogImage?: string
}

const { title, ogImage } = Astro.props
---

<script>
  import { jsTankaMain } from '@/classes/tanka'
  const prev = document.querySelector('.js-prev')
  const next = document.querySelector('.js-next')
  const tankaList = document.querySelectorAll('.js-tankaCard')
  let current = 0

  const scrollToTankaByid = (id: number) => {
    tankaList[id].scrollIntoView({ behavior: 'smooth', inline: 'center' })
  }

  prev?.addEventListener('click', () => {
    if (current < 1) return
    current--
    scrollToTankaByid(current)
  })

  next?.addEventListener('click', () => {
    if (current >= tankaList.length - 1) return
    current++
    scrollToTankaByid(current)
  })

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const target = entry.target as HTMLElement
          if (!target) return
          current = Number(target.dataset.tankaid) - 1
          redrawBar()
        }
      })
    },
    {
      root: document.querySelector('body'),
      rootMargin: '0px',
      threshold: 0.8,
    }
  )

  tankaList.forEach((tanka) => {
    observer.observe(tanka)
  })

  document.addEventListener('astro:page-load', () => {
    scrollToTankaByid(0)
  })

  const tankaMainElement = document.querySelector(jsTankaMain.getSelector())
  if (tankaMainElement) {
    tankaMainElement.addEventListener('wheel', (event) => {
      const e = event as WheelEvent
      if (Math.abs(e.deltaY) < Math.abs(e.deltaX)) return
      e.preventDefault()
      tankaMainElement.scrollLeft += e.deltaY
    })
  }

  const barElement = document.querySelector('.js-bar')
  const length = tankaList.length
  const redrawBar = () => {
    if (!barElement || length === 0) return
    const elm = barElement as HTMLDivElement
    elm.style.width = `${(current + 1) * (100 / length - 1)}%`
  }
</script>

<html lang="ja">
  <Head title={title} ogImage={ogImage} />
  <Body>
    <Header />
    <main>
      <Load />
      <article class="content">
        <slot />
        <Bar />
      </article>
    </main>
    <Footer />
  </Body>
</html>

<style lang="scss">
  .content {
    display: flex;
    flex-direction: column;
    width: 90%;
    max-width: 360px;
  }
</style>
