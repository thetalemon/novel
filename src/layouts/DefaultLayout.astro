---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import ReturnButton from "../components/ReturnButton.astro";
import NovelList from "../components/NovelList.astro";
export interface Props {
  title: string;
  cardTextColor?: string;
  cardBgColor?: string;
  bgColor?: string;
  bgUrl?: string;
  isTop?: boolean;
}

const {
  title,
  cardTextColor = "rgb(9, 51, 58);",
  cardBgColor = "rgba(181, 184, 199, 0.9);",
  bgColor = "3, 7, 19",
  bgUrl = "url('/bg/top.webp')",
  isTop = false,
} = Astro.props;
---

<Layout title={title}>
  <main style=`--bgColor: ${bgColor}; --bgUrl: ${bgUrl}`>
    <div class={`wrapper ${isTop ? "isTop" : ""}`}>
      <div class="inner">
        <Card textColor={cardTextColor} bgColor={cardBgColor}>
          <slot />
        </Card>
      </div>
      {
        !isTop && (
          <div class="menuWrapper">
            <div class="menu">
              <Card textColor={cardTextColor} bgColor={cardBgColor}>
                <NovelList isMenu={true} />
              </Card>
              <ReturnButton />
            </div>
          </div>
        )
      }
    </div>
  </main>
</Layout>

<style lang="scss">
  main {
    display: flex;
    justify-content: center;
    width: 100%;
    min-height: 100vh;
    z-index: 1;
    position: relative;
    background: rgba(var(--bgColor), 1);

    .menuWrapper {
      margin-bottom: 40px;
      width: calc(min(min(100vh, 100vw), 620px) - 24px);
      @media screen and (min-width: 1000px) {
        width: fit-content;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translateY(-40%)
          translateX(calc(min(min(100vh, 100vw), 620px) / 3));
        display: flex;
        align-items: center;
      }
      .menu {
        width: 100%;
        flex-shrink: 0;
        @media screen and (min-width: 1000px) {
          width: 240px;
        }
      }
    }

    .wrapper {
      display: flex;
      justify-content: center;
      row-gap: 40px;
      align-items: center;
      flex-direction: column;
      width: calc(min(min(100vh, 100vw), 1020px) + 280px);
    }

    .inner {
      margin: 48px 8px;
      width: calc(min(min(100vh, 100vw), 620px) - 24px);
      flex-shrink: 0;
      @media screen and (min-width: 1000px) {
        margin-right: 260px;
      }
    }

    .isTop.wrapper {
      .inner {
        @media screen and (min-width: 1000px) {
          margin-right: 0;
        }
      }
    }

    &::after {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: var(--bgUrl) no-repeat center bottom;
      background-size: contain;
      z-index: -2;
      opacity: 1;
    }
    &::before {
      content: "";
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: linear-gradient(
        rgba(var(--bgColor), 1) calc(100vh - 100vw * 0.95),
        rgba(var(--bgColor), 0) calc(100vh - 100vw * 0.7)
      );
      z-index: -1;
      opacity: 1;
    }
  }
</style>
